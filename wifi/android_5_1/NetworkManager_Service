SystemServer.java (z:\home\ballack\prj\rk3288\frameworks\base\services\java\com\android\server)
->  startOtherServices
    ->  networkManagement = NetworkManagementService.create(context);
------------------------------------------------------------------------------------------------------------------->
NetworkManagementService.java (z:\home\ballack\prj\rk3288\frameworks\base\services\core\java\com\android\server)
->  {
        private static final String NETD_SOCKET_NAME = "netd";

        public static NetworkManagementService create(Context context) throws InterruptedException {
            return create(context, NETD_SOCKET_NAME);
        }
    }
    ->  {
            static NetworkManagementService create(Context context, String socket) throws InterruptedException {
                NetworkManagementService service = new NetworkManagementService(context, socket);
                service.mThread.start();    // 下面会看到，这里启动的mThread线程是NativeDaemonConnector线程,作为client端，接收server端的消息！！
                                            // 这里会调用NativeDaemonConnector类的run方法，因为其继承了Runnable方法
            }
        }
        ->  {
                private NetworkManagementService(Context context, String socket) {
                    mConnector = new NativeDaemonConnector(
                            new NetdCallbackReceiver(), socket, 10, NETD_TAG, 160, wl,      // 这里的socket即为netd
                            FgThread.get().getLooper());
                    mThread = new Thread(mConnector, NETD_TAG);     // 创建NativeDaemonConnector线程
                }
            }

上面创建mConnector的时候，同时也执行了new NetdCallbackReceiver()，接着看NativeDaemonConnector和NetdCallbackReceiver类的关系：
看看NativeDaemonConnector类的构造函数：
NativeDaemonConnector.java (z:\home\hwlxhy\prj\rk3288\frameworks\base\services\core\java\com\android\server)
->  {
        NativeDaemonConnector(INativeDaemonConnectorCallbacks callbacks, String socket,
                int responseQueueSize, String logTag, int maxLogSize, PowerManager.WakeLock wl) {
            this(callbacks, socket, responseQueueSize, logTag, maxLogSize, wl,
                    FgThread.get().getLooper());
        }
    }
    ->  {
            NativeDaemonConnector(INativeDaemonConnectorCallbacks callbacks, String socket,
                    int responseQueueSize, String logTag, int maxLogSize, PowerManager.WakeLock wl,
                    Looper looper) {
                mCallbacks = callbacks;                                 // 这里的mCallbacks就是NetdCallbackReceiver类的实例
                mSocket = socket;                                       // 保存socket的名字，即netd， 下面会用到！！
            }
        }
------------------------------------------------------------------------------------------------------------------>
接着看service.mThread.start(); 这里调用start启动NativeDaemonConnector线程的时候调用run方法
NetworkManagementService.java (z:\home\ballack\prj\rk3288\frameworks\base\services\core\java\com\android\server)
->  {
        public void run() {                                             
            mCallbackHandler = new Handler(mLooper, this);              // 这里注册了一个和本类相关的Handler, 后续会用到！！
            listenToSocket();
        }
        ->  {
                private void listenToSocket() throws IOException {
                    socket = new LocalSocket();                                             // 创建socket
                    LocalSocketAddress address = determineSocketAddress();

                    socket.connect(address);                                                // connect,作为客户端，这样就可以接收和发送消息给netd

                    InputStream inputStream = socket.getInputStream();
                    synchronized (mDaemonLock) {
                        mOutputStream = socket.getOutputStream();
                    }

                    mCallbacks.onDaemonConnected();

                    byte[] buffer = new byte[BUFFER_SIZE];
                    int start = 0;

                    while (true) {
                        int count = inputStream.read(buffer, start, BUFFER_SIZE - start);   // 调用read函数一直读取socket数据

                        // Add our starting point to the count and reset the start.
                        count += start;
                        start = 0;

                        for (int i = 0; i < count; i++) {
                            final NativeDaemonEvent event = NativeDaemonEvent.parseRawEvent( rawEvent);

                            if (event.isClassUnsolicited()) {
                                mCallbackHandler.sendMessage(mCallbackHandler.obtainMessage(
                                            event.getCode(), event.getRawEvent()));                 // 这里就用到了上面说的Handler
                            } else {
                                mResponseQueue.add(event.getCmdNumber(), event);                    // 后面再分析！！
                            }
                        }
                    }

                }
            }
            ->  {
                    private LocalSocketAddress determineSocketAddress() {
                        return new LocalSocketAddress(mSocket, LocalSocketAddress.Namespace.RESERVED);  // 这里就用到了mSocket
                    }
                }
    }
->  {
        public boolean handleMessage(Message msg) {                                         // 这里就处理上面的sendMessage消息！！
            String event = (String) msg.obj;
            
            // 这里调用的就是NetdCallbackReceiver的onEvent函数， 下面会提到！！！
            if (!mCallbacks.onEvent(msg.what, event, NativeDaemonEvent.unescapeArgs(event))) {  // 这里就是调用的NetdCallbackReceiver类的onEvent
                log(String.format("Unhandled event '%s'", event));
            }
        }
    }
-------------------------------------------------------------------------------------------------------------
NetworkManagementService服务主要是通过NativeDaemonConnector与底层的netd服务通信的！！！
接下来看netd服务是怎么启动的：
从init.rc中可以看到如下定义：
service netd /system/bin/netd
    class main
    socket netd stream 0660 root system         // init.c中的main函数在解析init.rc的时候会创建这个socket
    socket dnsproxyd stream 0660 root inet
    socket mdns stream 0660 root system
    socket fwmarkd stream 0660 root inet
可见netd服务是开机就启动的！！
来看main函数：
Main.cpp (z:\home\ballack\prj\rk3288\system\netd\server)
->  {
        int main() {
            CommandListener *cl;

            nm = NetlinkManager::Instance();                // 这里实例化了一个NetlinkManager对象

            cl = new CommandListener();
            nm->setBroadcaster((SocketListener *) cl);      // 将cl设置成nm（NetlinkManager）的消息发送者（mBroadcaster）, 后面使用的sendBroadcast
                                                            // 就是用的这个！！！！
            nm->start();                                    // 这里调用start函数启动NetlinkManager

            cl->startListener();                            // 下面会分析到，这个其实调用的是父类SocketListener的startListener函数
        }
    } 
---------------------------------------------------------->
CommandListener.cpp (z:\home\ballack\prj\rk3288\system\netd\server)	
->  {
        CommandListener::CommandListener() :
                 FrameworkListener("netd", true) {                      // 继承于FrameworkListener类，这里指定了socket name : netd！！！
            registerCmd(new SoftapCmd());                               // 这里会注册一个softap的Cmd类型
            if (!sSoftapCtrl)
                sSoftapCtrl = new SoftapController();                   // softap中使用的控制类

            registerCmd(new TetherCmd());
            if (!sTetherCtrl)
                sTetherCtrl = new TetherController();
        }
    }
--------------------------------------------------------------------->
FrameworkListener.cpp (z:\home\ballack\prj\rk3288\system\core\libsysutils\src)
->  {
        FrameworkListener::FrameworkListener(const char *socketName) :
                            SocketListener(socketName, true, false) {   // 这里继承了父类SocketListener
            init(socketName, false);
        }
    }
-------------------------------------------------------------------------------->
SocketListener.cpp (z:\home\ballack\prj\rk3288\system\core\libsysutils\src)
->  {
        SocketListener::SocketListener(const char *socketName, bool listen, bool useCmdNum) {
            init(socketName, -1, listen, useCmdNum);
        }

        int SocketListener::startListener(int backlog) {        // 调用startListener函数
            mSock = android_get_control_socket(mSocketName);    // 获取mSocketName指定的socket对应的文件描述符，即netd对应的文件描述符

            if (mListen && listen(mSock, backlog) < 0) {        // 监听socket, 注意！！这里netd这个socket的bind是在创建socket的时候做的！！
                SLOGE("Unable to listen on socket (%s)", strerror(errno));
                return -1;
            } else if (!mListen)
                mClients->push_back(new SocketClient(mSock, false, mUseCmdNum));

            if (pipe(mCtrlPipe)) {
                SLOGE("pipe failed (%s)", strerror(errno));
                return -1;
            }

            if (pthread_create(&mThread, NULL, SocketListener::threadStart, this)) {    // 创建一个线程调用accept等待客户端的连接
                SLOGE("pthread_create (%s)", strerror(errno));
                return -1;
            }
        }
    }
以上就是创建了一个充当监听netd socket的服务器！！！
--------------------------------------------------------------------------------------------------------------------------->
SocketListener.cpp (z:\home\ballack\prj\rk3288\system\core\libsysutils\src)
->  {
        void *SocketListener::threadStart(void *obj) {
            SocketListener *me = reinterpret_cast<SocketListener *>(obj);

            me->runListener();
            pthread_exit(NULL);
            return NULL;
        }
    }
    ->  {
            void SocketListener::runListener() {
                while(1) {
                    SocketClientCollection::iterator it;
                    fd_set read_fds;
                    int rc = 0;
                    int max = -1;

                    FD_ZERO(&read_fds);

                    if (mListen) {
                        max = mSock;
                        FD_SET(mSock, &read_fds);
                    }

                    FD_SET(mCtrlPipe[0], &read_fds);
                    if (mCtrlPipe[0] > max)
                        max = mCtrlPipe[0];

                    pthread_mutex_lock(&mClientsLock);
                    for (it = mClients->begin(); it != mClients->end(); ++it) {
                        // NB: calling out to an other object with mClientsLock held (safe)
                        int fd = (*it)->getSocket();
                        FD_SET(fd, &read_fds);
                        if (fd > max) {
                            max = fd;
                        }
                    }
                    pthread_mutex_unlock(&mClientsLock);
                    SLOGV("mListen=%d, max=%d, mSocketName=%s", mListen, max, mSocketName);
                    if ((rc = select(max + 1, &read_fds, NULL, NULL, NULL)) < 0) {                      // 调用select等待socket
                        if (errno == EINTR)
                            continue;
                        SLOGE("select failed (%s) mListen=%d, max=%d", strerror(errno), mListen, max);
                        sleep(1);
                        continue;
                    } else if (!rc)
                        continue;

                    if (FD_ISSET(mCtrlPipe[0], &read_fds)) {
                        char c = CtrlPipe_Shutdown;
                        TEMP_FAILURE_RETRY(read(mCtrlPipe[0], &c, 1));
                        if (c == CtrlPipe_Shutdown) {
                            break;
                        }
                        continue;
                    }

                    if (mListen && FD_ISSET(mSock, &read_fds)) {
                        struct sockaddr addr;
                        socklen_t alen;
                        int c;

                        do {
                            alen = sizeof(addr);
                            c = accept(mSock, &addr, &alen);                    // 等待客户端连接(即NativeDaemonConnector线程)，保存到c变量中
                            SLOGV("%s got %d from accept", mSocketName, c);
                        } while (c < 0 && errno == EINTR);
                        if (c < 0) {
                            SLOGE("accept failed (%s)", strerror(errno));
                            sleep(1);
                            continue;
                        }
                        pthread_mutex_lock(&mClientsLock);
                        mClients->push_back(new SocketClient(c, true, mUseCmdNum));         // 添加到mClients队列中
                        pthread_mutex_unlock(&mClientsLock);
                    }

                    /* Add all active clients to the pending list first */
                    pendingList.clear();
                    pthread_mutex_lock(&mClientsLock);
                    for (it = mClients->begin(); it != mClients->end(); ++it) {
                        SocketClient* c = *it;
                        // NB: calling out to an other object with mClientsLock held (safe)
                        int fd = c->getSocket();
                        if (FD_ISSET(fd, &read_fds)) {
                            pendingList.push_back(c);
                            c->incRef();
                        }
                    }
                    pthread_mutex_unlock(&mClientsLock);

                    while (!pendingList.empty()) {
                        /* Pop the first item from the list */
                        it = pendingList.begin();
                        SocketClient* c = *it;
                        pendingList.erase(it);
                        /* Process it, if false is returned, remove from list */
                        if (!onDataAvailable(c)) {                                              // 调用onDataAvailable
                            release(c, false);
                        }
                        c->decRef();
                    }
                }
            }
        }
--------------------------------------------------------------------------------------------------------
NetlinkListener.cpp (z:\home\ballack\prj\rk3288\system\core\libsysutils\src)
->  {
        bool NetlinkListener::onDataAvailable(SocketClient *cli)
        {
            NetlinkEvent *evt = new NetlinkEvent();                                         // 创建NetlinkEvent对象
            if (evt->decode(mBuffer, count, mFormat)) {                                     // 调用decode
                onEvent(evt);                                                               // 因为NetlinkHandler继承于NetlinkListener,
                                                                                            // 这里调用父类的NetlinkHandler::onEvent
            } else if (mFormat != NETLINK_FORMAT_BINARY) {
                // Don't complain if parseBinaryNetlinkMessage returns false. That can
                // just mean that the buffer contained no messages we're interested in.
                SLOGE("Error decoding NetlinkEvent");
            }
        }
    }
--------------------------------------------------------------------------------------------------------
NetlinkEvent.cpp (z:\home\ballack\prj\rk3288\system\core\libsysutils\src)
->  {
        bool NetlinkEvent::decode(char *buffer, int size, int format) {
            if (format == NetlinkListener::NETLINK_FORMAT_BINARY) {
                return parseBinaryNetlinkMessage(buffer, size);
            } else {
                return parseAsciiNetlinkMessage(buffer, size);
            }
        }
    }
    ->  {
            if (nh->nlmsg_type == RTM_NEWLINK) {
                if (parseIfInfoMessage(nh))
                    return true;
            }
        }
        ->  {
                bool NetlinkEvent::parseIfInfoMessage(const struct nlmsghdr *nh) {
                    int len = IFLA_PAYLOAD(nh);
                    struct rtattr *rta;
                    for (rta = IFLA_RTA(ifi); RTA_OK(rta, len); rta = RTA_NEXT(rta, len)) {
                        switch(rta->rta_type) {
                            case IFLA_IFNAME:
                                asprintf(&mParams[0], "INTERFACE=%s", (char *) RTA_DATA(rta));
                                mAction = (ifi->ifi_flags & IFF_LOWER_UP) ? NlActionLinkUp : NlActionLinkDown; // NlActionLinkUp或NlActionLinkDown
                                mSubsystem = strdup("net");
                                return true;
                        }
                    }
                }
            }
-------------------------------------------------------------------------------------------------------
NetlinkHandler.cpp (z:\home\ballack\prj\rk3288\system\netd\server)
->  {
        void NetlinkHandler::onEvent(NetlinkEvent *evt) {   
            if (!strcmp(subsys, "net")) {
                int action = evt->getAction();
                const char *iface = evt->findParam("INTERFACE");

                if (action == evt->NlActionLinkUp) {                    // NlActionLinkUp
                    notifyInterfaceLinkChanged(iface, true);
                } else if (action == evt->NlActionLinkDown) {           // NlActionLinkDown
                    notifyInterfaceLinkChanged(iface, false);
                }
            }
        }
    }
    ->  {
            void NetlinkHandler::notifyInterfaceLinkChanged(const char *name, bool isUp) {
                notify(ResponseCode::InterfaceChange,
                        "Iface linkstate %s %s", name, (isUp ? "up" : "down"));         // 这里的格式即为Iface linkstatus <name> <up/down>
            }
        }
        ->  {
                void NetlinkHandler::notify(int code, const char *format, ...) {
                    char *msg;
                    va_list args;
                    va_start(args, format);
                    if (vasprintf(&msg, format, args) >= 0) {
                        mNm->getBroadcaster()->sendBroadcast(code, msg, false);                     
                        free(msg);
                    } else {
                        SLOGE("Failed to send notification: vasprintf: %s", strerror(errno));
                    }
                    va_end(args);
                }
            }
----------------------------------------------------------------------------------------------------
SocketListener.cpp (z:\home\ballack\prj\rk3288\system\core\libsysutils\src)
->  {
        void SocketListener::sendBroadcast(int code, const char *msg, bool addErrno) {
            SocketClientCollection safeList;

            /* Add all active clients to the safe list first */
            safeList.clear();
            pthread_mutex_lock(&mClientsLock);
            SocketClientCollection::iterator i;

            for (i = mClients->begin(); i != mClients->end(); ++i) {
                SocketClient* c = *i;
                c->incRef();
                safeList.push_back(c);
            }
            pthread_mutex_unlock(&mClientsLock);

            while (!safeList.empty()) {
                /* Pop the first item from the list */
                i = safeList.begin();
                SocketClient* c = *i;
                safeList.erase(i);
                // broadcasts are unsolicited and should not include a cmd number
                if (c->sendMsg(code, msg, addErrno, false)) {                           // 调用sendMsg函数
                    SLOGW("Error sending broadcast (%s)", strerror(errno));
                }
                c->decRef();
            }
        }
    }
-------------------------------------------------------------------------------------------------------
SocketClient.cpp (z:\home\ballack\prj\rk3288\system\core\libsysutils\src)
->  {
        int SocketClient::sendMsg(int code, const char *msg, bool addErrno, bool useCmdNum) {
            char *buf;
            int ret = 0;

            if (addErrno) {
                if (useCmdNum) {
                    ret = asprintf(&buf, "%d %d %s (%s)", code, getCmdNum(), msg, strerror(errno));
                } else {
                    ret = asprintf(&buf, "%d %s (%s)", code, msg, strerror(errno));
                }
            } else {
                if (useCmdNum) {
                    ret = asprintf(&buf, "%d %d %s", code, getCmdNum(), msg);
                } else {
                    ret = asprintf(&buf, "%d %s", code, msg);
                }
            }
            // Send the zero-terminated message
            if (ret != -1) {
                ret = sendMsg(buf);                                                 // 调用sendMsg函数
                free(buf);
            }
            return ret;
        }
        ->  {
                int SocketClient::sendMsg(const char *msg) {
                    // Send the message including null character
                    if (sendData(msg, strlen(msg) + 1) != 0) {                      // 调用sendData函数
                        SLOGW("Unable to send msg '%s'", msg);
                        return -1;
                    }
                    return 0;
                }
            }
            ->  {
                    int SocketClient::sendData(const void *data, int len) {
                        struct iovec vec[1];
                        vec[0].iov_base = (void *) data;
                        vec[0].iov_len = len;

                        pthread_mutex_lock(&mWriteMutex);
                        int rc = sendDataLockedv(vec, 1);                           // 调用sendDataLockedv函数
                        pthread_mutex_unlock(&mWriteMutex);

                        return rc;
                    }
                }
                ->  {
                        int SocketClient::sendDataLockedv(struct iovec *iov, int iovcnt) {
                            writev(mSocket, iov + current, iovcnt - current));      // 这里其实是调用write往socket写数据
                                                                                    // 与上面的inputStream.read函数对应
                                                                                    // 从而调用NetdCallbackReceiver的onEvent函数
                        }
                    }
    }
-------------------------------------------------------------------------------------------------------------------------->
上面没展开的NetdCallbackReceiver类，这里继续讲：
NetworkManagementService.java (z:\home\ballack\prj\rk3288\frameworks\base\services\core\java\com\android\server)
->  {
        private class NetdCallbackReceiver implements INativeDaemonConnectorCallbacks {
            public boolean onEvent(int code, String raw, String[] cooked) {
                switch (code) {
                    case NetdResponseCode.InterfaceChange:
                        /*
                         * a network interface change occured
                         * Format: "NNN Iface added <name>"
                         *         "NNN Iface removed <name>"
                         *         "NNN Iface changed <name> <up/down>"
                         *         "NNN Iface linkstatus <name> <up/down>"
                         */
                        if (cooked.length < 4 || !cooked[1].equals("Iface")) {
                            throw new IllegalStateException(errorMessage);
                        }
                        if (cooked[2].equals("added")) {                // 可以看到，这里监听了added，removed，changed，linkstate的事件
                            notifyInterfaceAdded(cooked[3]);
                            return true;
                        } else if (cooked[2].equals("removed")) {
                            notifyInterfaceRemoved(cooked[3]);
                            return true;
                        } else if (cooked[2].equals("changed") && cooked.length == 5) {
                            notifyInterfaceStatusChanged(cooked[3], cooked[4].equals("up"));
                            return true;
                        } else if (cooked[2].equals("linkstate") && cooked.length == 5) {
                            notifyInterfaceLinkStateChanged(cooked[3], cooked[4].equals("up"));
                            return true;
                        }
                        throw new IllegalStateException(errorMessage);
                        // break;
                }
            }
        }
    }
------------------------------------------------------------------------------------------------------------------------------->
接下来看在CommandListener类中创建的SoftapCmd类：
CommandListener.cpp (z:\home\ballack\prj\rk3288\system\netd\server)	
->  {
        CommandListener::SoftapCmd::SoftapCmd() :
                 NetdCommand("softap") {
            // 空函数
        }
    }
可以看到softapCmd类是继承于NetdCommand的，而且传参是softap， 这个参数就是命令类型，后面通过mConnector调用函数时会用到！！！
-------------------------------------------------------------------------------------------------------------
Main.cpp (z:\home\ballack\prj\rk3288\system\netd\server)
->  {
        int main() {
            CommandListener *cl;

            nm = NetlinkManager::Instance();                // 这里实例化了一个NetlinkManager对象

            cl = new CommandListener();
            nm->setBroadcaster((SocketListener *) cl);      // 将cl设置成nm（NetlinkManager）的消息发送者（mBroadcaster）, 后面使用的sendBroadcast
                                                            // 就是用的这个！！！！
            nm->start();                                    // 这里调用start函数启动NetlinkManager

            cl->startListener();                            // 下面会分析到，这个其实调用的是父类SocketListener的startListener函数
        }
    } 
------------------------------------------------------------------------------>
NetlinkManager.cpp (system\netd\server)	
->  {
        int NetlinkManager::start() {                       // nm->start();调用到这里
            if ((mUeventHandler = setupSocket(&mUeventSock, NETLINK_KOBJECT_UEVENT,
                            0xffffffff, NetlinkListener::NETLINK_FORMAT_ASCII)) == NULL) {
                return -1;
            }

            if ((mRouteHandler = setupSocket(&mRouteSock, NETLINK_ROUTE,
                            RTMGRP_LINK |
                            RTMGRP_IPV4_IFADDR |
                            RTMGRP_IPV6_IFADDR |
                            RTMGRP_IPV6_ROUTE |
                            (1 << (RTNLGRP_ND_USEROPT - 1)),
                            NetlinkListener::NETLINK_FORMAT_BINARY)) == NULL) {
                return -1;
            }

            if ((mQuotaHandler = setupSocket(&mQuotaSock, NETLINK_NFLOG,
                            NFLOG_QUOTA_GROUP, NetlinkListener::NETLINK_FORMAT_BINARY)) == NULL) {
                ALOGE("Unable to open quota2 logging socket");
                // TODO: return -1 once the emulator gets a new kernel.
            }

            return 0;
        }
    }
    ->  {
            NetlinkHandler *NetlinkManager::setupSocket(int *sock, int netlinkFamily, int groups, int format) {
                struct sockaddr_nl nladdr;
                int sz = 64 * 1024;
                int on = 1;

                memset(&nladdr, 0, sizeof(nladdr));
                nladdr.nl_family = af_netlink;
                nladdr.nl_pid = getpid();
                nladdr.nl_groups = groups;

                if ((*sock = socket(pf_netlink, sock_dgram, netlinkfamily)) < 0) {      // 创建新的socket
                    aloge("unable to create netlink socket: %s", strerror(errno));
                    return null;
                }

                if (setsockopt(*sock, sol_socket, so_rcvbufforce, &sz, sizeof(sz)) < 0) {
                    aloge("unable to set uevent socket so_rcvbufforce option: %s", strerror(errno));
                    close(*sock);
                    return null;
                }

                if (setsockopt(*sock, SOL_SOCKET, SO_PASSCRED, &on, sizeof(on)) < 0) {
                    SLOGE("Unable to set uevent socket SO_PASSCRED option: %s", strerror(errno));
                    close(*sock);
                    return NULL;
                }

                if (bind(*sock, (struct sockaddr *) &nladdr, sizeof(nladdr)) < 0) {     // bind socket
                    ALOGE("Unable to bind netlink socket: %s", strerror(errno));
                    close(*sock);
                    return NULL;
                }

                NetlinkHandler *handler = new NetlinkHandler(this, *sock, format);      // 这里实例化NetlinkHandler对象
                if (handler->start()) {                                                 // 这里调用start函数启动
                    ALOGE("Unable to start NetlinkHandler: %s", strerror(errno));
                    close(*sock);
                    return NULL;
                }

                return handler;
            }
        }
--------------------------------------------------------------------------------------->
NetlinkHandler.cpp (system\netd\server)	
->  {
        NetlinkHandler::NetlinkHandler(NetlinkManager *nm, int listenerSocket, int format) :
                NetlinkListener(listenerSocket, format) {                               // 这里继承了NetlinkListener类
            mNm = nm;
        }

        int NetlinkHandler::start() {
            return this->startListener();           // 下面会提到，这里实际上是调用父类SocketListener中的startListener方法
        }
    }
------------------------------------------------------------------------------------------------>
NetlinkListener.cpp (system\core\libsysutils\src)
->  {
        NetlinkListener::NetlinkListener(int socket, int format) :
            SocketListener(socket, false), mFormat(format) {            // 这里可以看到NetlinkListener也是继承于SocketListener类
        }
    }
-------------------------------------------------------------------------------------------------------






