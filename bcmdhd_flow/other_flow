wl_iw.c
->  {
        static const iw_handler wl_iw_handler[] =
        {
            (iw_handler) wl_iw_config_commit,	/* SIOCSIWCOMMIT */
            (iw_handler) wl_iw_get_name,		/* SIOCGIWNAME */
            (iw_handler) NULL,			/* SIOCSIWNWID */
            (iw_handler) NULL,			/* SIOCGIWNWID */
            (iw_handler) wl_iw_set_freq,		/* SIOCSIWFREQ */
            (iw_handler) wl_iw_get_freq,		/* SIOCGIWFREQ */
            (iw_handler) wl_iw_set_mode,		/* SIOCSIWMODE */
            (iw_handler) wl_iw_get_mode,		/* SIOCGIWMODE */
        }

        static int wl_iw_set_freq( struct net_device *dev, struct iw_request_info *info, struct iw_freq *fwrq, char *extra)
        {
            int error, chan;
            uint sf = 0;

            WL_TRACE(("%s: SIOCSIWFREQ\n", dev->name));

            /* Setting by channel number */
            if (fwrq->e == 0 && fwrq->m < MAXCHANNEL) {
                chan = fwrq->m;
            }
            /* Setting by frequency */
            else {
                /* Convert to MHz as best we can */
                if (fwrq->e >= 6) {
                    fwrq->e -= 6;
                    while (fwrq->e--)
                        fwrq->m *= 10;
                } else if (fwrq->e < 6) {
                    while (fwrq->e++ < 6)
                        fwrq->m /= 10;
                }
                /* handle 4.9GHz frequencies as Japan 4 GHz based channelization */
                if (fwrq->m > 4000 && fwrq->m < 5000) {
                    sf = WF_CHAN_FACTOR_4_G; /* start factor for 4 GHz */
                }
                chan = wf_mhz2channel(fwrq->m, sf);
            }
            WL_ERROR(("%s: chan=%d\n", __FUNCTION__, chan));
            chan = htod32(chan);
            if ((error = dev_wlc_ioctl(dev, WLC_SET_CHANNEL, &chan, sizeof(chan)))) {
                WL_ERROR(("%s: WLC_SET_CHANNEL failed (%d).\n", __FUNCTION__, error));
                return error;
            }

            /* -EINPROGRESS: Call commit handler */
            return -EINPROGRESS;
        }

        static int dev_wlc_ioctl( struct net_device *dev, int cmd, void *arg, int len)
        {
            struct ifreq ifr;
            wl_ioctl_t ioc;
            mm_segment_t fs;
            int ret;

            memset(&ioc, 0, sizeof(ioc));
            ioc.cmd = cmd;
            ioc.buf = arg;
            ioc.len = len;

            strncpy(ifr.ifr_name, dev->name, sizeof(ifr.ifr_name));
            ifr.ifr_name[sizeof(ifr.ifr_name) - 1] = '\0';
            ifr.ifr_data = (caddr_t) &ioc;

            fs = get_fs();
            set_fs(get_ds());
#if defined(WL_USE_NETDEV_OPS)
            ret = dev->netdev_ops->ndo_do_ioctl(dev, &ifr, SIOCDEVPRIVATE);
#else
            ret = dev->do_ioctl(dev, &ifr, SIOCDEVPRIVATE);
#endif
            set_fs(fs);

            return ret;
        }
    }
---------------------------------------------------------------------------------------------------------
dhd_linux.c
->  {
    #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 31))
        static struct net_device_ops dhd_ops_pri = {
            .ndo_open = dhd_open,
            .ndo_stop = dhd_stop,
            .ndo_get_stats = dhd_get_stats,
            .ndo_do_ioctl = dhd_ioctl_entry,
            .ndo_start_xmit = dhd_start_xmit,
            .ndo_set_mac_address = dhd_set_mac_address,
    #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 2, 0))
            .ndo_set_rx_mode = dhd_set_multicast_list,
    #else
            .ndo_set_multicast_list = dhd_set_multicast_list,
    #endif
        };

        static int dhd_ioctl_entry(struct net_device *net, struct ifreq *ifr, int cmd)
        {
            ifidx = dhd_net2idx(dhd, net);
            DHD_TRACE(("%s: ifidx %d, cmd 0x%04x\n", __FUNCTION__, ifidx, cmd));

        #if defined(WL_WIRELESS_EXT)
            /* linux wireless extensions */
            if ((cmd >= SIOCIWFIRST) && (cmd <= SIOCIWLAST)) {
                /* may recurse, do NOT lock */
                ret = wl_iw_ioctl(net, ifr, cmd);                   // 如果定义了WL_WIRELESS_EXT, 则调用wl_iw_ioctl
                DHD_PERIM_UNLOCK(&dhd->pub);
                DHD_OS_WAKE_UNLOCK(&dhd->pub);
                return ret;
            }
        #endif /* defined(WL_WIRELESS_EXT) */

        #if LINUX_VERSION_CODE > KERNEL_VERSION(2, 4, 2)
            if (cmd == SIOCETHTOOL) {
                ret = dhd_ethtool(dhd, (void*)ifr->ifr_data);
                DHD_PERIM_UNLOCK(&dhd->pub);
                DHD_OS_WAKE_UNLOCK(&dhd->pub);
                return ret;
            }
        #endif /* LINUX_VERSION_CODE > KERNEL_VERSION(2, 4, 2) */

            if (cmd == SIOCDEVPRIVATE+1) {                          // 处理SIOCDEVPRIVATE+1
                ret = wl_android_priv_cmd(net, ifr, cmd);           
                dhd_check_hang(net, &dhd->pub, ret);
                DHD_PERIM_UNLOCK(&dhd->pub);
                DHD_OS_WAKE_UNLOCK(&dhd->pub);
                return ret;
            }

            if (cmd != SIOCDEVPRIVATE) {                            // 如果不是SIOCDEVPRIVATE命令，则返回！！
                DHD_PERIM_UNLOCK(&dhd->pub);
                DHD_OS_WAKE_UNLOCK(&dhd->pub);
                return -EOPNOTSUPP;
            }

            memset(&ioc, 0, sizeof(ioc));

            /* Copy the ioc control structure part of ioctl request */
            if (copy_from_user(&ioc, ifr->ifr_data, sizeof(wl_ioctl_t))) {
                bcmerror = BCME_BADADDR;
                goto done;
            }

            /* To differentiate between wl and dhd read 4 more byes */
            if ((copy_from_user(&ioc.driver, (char *)ifr->ifr_data + sizeof(wl_ioctl_t),
                            sizeof(uint)) != 0)) {
                bcmerror = BCME_BADADDR;
                goto done;
            }

            /* Take backup of ioc.buf and restore later */
            ioc_buf_user = ioc.buf;

            if (ioc.len > 0) {
                buflen = MIN(ioc.len, DHD_IOCTL_MAXLEN);
                if (!(local_buf = MALLOC(dhd->pub.osh, buflen+1))) {
                    bcmerror = BCME_NOMEM;
                    goto done;
                }

                DHD_PERIM_UNLOCK(&dhd->pub);
                if (copy_from_user(local_buf, ioc.buf, buflen)) {
                    DHD_PERIM_LOCK(&dhd->pub);
                    bcmerror = BCME_BADADDR;
                    goto done;
                }
                DHD_PERIM_LOCK(&dhd->pub);

                *((char *)local_buf + buflen) = '\0';

                /* For some platforms accessing userspace memory
                 * of ioc.buf is causing kernel panic, so to avoid that
                 * make ioc.buf pointing to kernel space memory local_buf
                 */
                ioc.buf = local_buf;
            }

            /* Skip all the non DHD iovars (wl iovars) after f/w hang */
            if (ioc.driver != DHD_IOCTL_MAGIC && dhd->pub.hang_was_sent) {
                DHD_TRACE(("%s: HANG was sent up earlier\n", __FUNCTION__));
                DHD_OS_WAKE_LOCK_CTRL_TIMEOUT_ENABLE(&dhd->pub, DHD_EVENT_TIMEOUT_MS);
                bcmerror = BCME_DONGLE_DOWN;
                goto done;
            }

            bcmerror = dhd_ioctl_process(&dhd->pub, ifidx, &ioc, local_buf);            // 调用dhd_ioctl_process函数

            /* Restore back userspace pointer to ioc.buf */
            ioc.buf = ioc_buf_user;
        }

        int dhd_ioctl_process(dhd_pub_t *pub, int ifidx, dhd_ioctl_t *ioc, void *data_buf)
        {
            bcmerror = dhd_wl_ioctl(pub, ifidx, (wl_ioctl_t *)ioc, data_buf, buflen);
        }
    }
---------------------------------------------------------------------------------------------------------
dhd_common.c
->  {
        int dhd_wl_ioctl_cmd(dhd_pub_t *dhd_pub, int cmd, void *arg, int len, uint8 set, int ifidx)
        {
            wl_ioctl_t ioc;

            ioc.cmd = cmd;
            ioc.buf = arg;
            ioc.len = len;
            ioc.set = set;

            return dhd_wl_ioctl(dhd_pub, ifidx, &ioc, arg, len);
        }

        int dhd_wl_ioctl(dhd_pub_t *dhd_pub, int ifidx, wl_ioctl_t *ioc, void *buf, int len)
        {
            if (dhd_os_proto_block(dhd_pub))
            {
        #ifdef DHD_LOG_DUMP
                int slen, i, val, rem, lval, min_len;
                char *pval, *pos, *msg;
                char tmp[64];

                /* WLC_GET_VAR */
                if (ioc->cmd == WLC_GET_VAR) {
                    min_len = MIN(sizeof(tmp) - 1, strlen(buf));
                    memset(tmp, 0, sizeof(tmp));
                    bcopy(buf, tmp, min_len);
                    tmp[min_len] = '\0';
                }
        #endif /* DHD_LOG_DUMP */
        
                ret = dhd_prot_ioctl(dhd_pub, ifidx, ioc, buf, len);            // 调用dhd_prot_ioctl函数

        #ifdef DHD_LOG_DUMP
                if (ioc->cmd == WLC_GET_VAR || ioc->cmd == WLC_SET_VAR) {
                    lval = 0;
                    slen = strlen(buf) + 1;
                    msg = (char*)buf;
                    if (len >= slen + sizeof(lval)) {
                        if (ioc->cmd == WLC_GET_VAR) {
                            msg = tmp;
                            lval = *(int*)buf;
                        } else {
                            min_len = MIN(ioc->len - slen, sizeof(int));
                            bcopy((msg + slen), &lval, min_len);
                        }
                    }
                    DHD_ERROR_MEM(("%s: cmd: %d, msg: %s, val: 0x%x, len: %d, set: %d\n",
                                ioc->cmd == WLC_GET_VAR ? "WLC_GET_VAR" : "WLC_SET_VAR",
                                ioc->cmd, msg, lval, ioc->len, ioc->set));
                } else {
                    slen = ioc->len;
                    if (buf != NULL) {
                        val = *(int*)buf;
                        pval = (char*)buf;
                        pos = tmp;
                        rem = sizeof(tmp);
                        memset(tmp, 0, sizeof(tmp));
                        for (i = 0; i < slen; i++) {
                            if (rem <= 3) {
                                /* At least 2 byte required + 1 byte(NULL) */
                                break;
                            }
                            pos += snprintf(pos, rem, "%02x ", pval[i]);
                            rem = sizeof(tmp) - (int)(pos - tmp);
                        }
                        /* Do not dump for WLC_GET_MAGIC and WLC_GET_VERSION */
                        if (ioc->cmd != WLC_GET_MAGIC && ioc->cmd != WLC_GET_VERSION)
                            DHD_ERROR_MEM(("WLC_IOCTL: cmd: %d, val: %d(%s), "
                                        "len: %d, set: %d\n",
                                        ioc->cmd, val, tmp, ioc->len, ioc->set));
                    } else {
                        DHD_ERROR_MEM(("WLC_IOCTL: cmd: %d, buf is NULL\n", ioc->cmd));
                    }
                }
        #endif /* DHD_LOG_DUMP */
                if (ret && dhd_pub->up) {
                    /* Send hang event only if dhd_open() was success */
                    dhd_os_check_hang(dhd_pub, ifidx, ret);
                }

                if (ret == -ETIMEDOUT && !dhd_pub->up) {
                    DHD_ERROR(("%s: 'resumed on timeout' error is "
                                "occurred before the interface does not"
                                " bring up\n", __FUNCTION__));
                    dhd_pub->busstate = DHD_BUS_DOWN;
                }
        }
    }
----------------------------------------------------------------------------------------------
dhd_cdc.c
->  {
        int dhd_prot_ioctl(dhd_pub_t *dhd, int ifidx, wl_ioctl_t * ioc, void * buf, int len)
        {
            if ((dhd->busstate == DHD_BUS_DOWN) || dhd->hang_was_sent) {
                DHD_ERROR(("%s : bus is down. we have nothing to do - bs: %d, has: %d\n",
                            __FUNCTION__, dhd->busstate, dhd->hang_was_sent));
                goto done;
            }

            DHD_TRACE(("%s: Enter\n", __FUNCTION__));

            if (prot->pending == TRUE) {
                DHD_ERROR(("CDC packet is pending!!!! cmd=0x%x (%lu) lastcmd=0x%x (%lu)\n",
                            ioc->cmd, (unsigned long)ioc->cmd, prot->lastcmd,
                            (unsigned long)prot->lastcmd));
                if ((ioc->cmd == WLC_SET_VAR) || (ioc->cmd == WLC_GET_VAR)) {
                    DHD_TRACE(("iovar cmd=%s\n", buf ? (char*)buf : "\0"));
                }
                goto done;
            }

            prot->pending = TRUE;
            prot->lastcmd = ioc->cmd;
            action = ioc->set;
            if (action & WL_IOCTL_ACTION_SET)
                ret = dhdcdc_set_ioctl(dhd, ifidx, ioc->cmd, buf, len, action);
            else {
                ret = dhdcdc_query_ioctl(dhd, ifidx, ioc->cmd, buf, len, action);
                if (ret > 0)
                    ioc->used = ret - sizeof(cdc_ioctl_t);
            }

            // terence 20130805: send hang event to wpa_supplicant
            if (ret == -EIO) {
                error_cnt++;
                if (error_cnt > 2)
                    ret = -ETIMEDOUT;
            } else
                error_cnt = 0;

            /* Too many programs assume ioctl() returns 0 on success */
            if (ret >= 0)
                ret = 0;
            else {
                cdc_ioctl_t *msg = &prot->msg;
                ioc->needed = ltoh32(msg->len); /* len == needed when set/query fails from dongle */
            }

            prot->pending = FALSE;
        }
        ->  {
                static int dhdcdc_query_ioctl(dhd_pub_t *dhd, int ifidx, uint cmd, void *buf, uint len, uint8 action)
                {
                    DHD_TRACE(("%s: Enter\n", __FUNCTION__));
                    DHD_CTL(("%s: cmd %d len %d\n", __FUNCTION__, cmd, len));
    
                    memset(msg, 0, sizeof(cdc_ioctl_t));

                    msg->cmd = htol32(cmd);
                    msg->len = htol32(len);
                    msg->flags = (++prot->reqid << CDCF_IOC_ID_SHIFT);
                    CDC_SET_IF_IDX(msg, ifidx);
                    /* add additional action bits */
                    action &= WL_IOCTL_ACTION_MASK;
                    msg->flags |= (action << CDCF_IOC_ACTION_SHIFT);
                    msg->flags = htol32(msg->flags);

                    if (buf)
                        memcpy(prot->buf, buf, len);

                    if ((ret = dhdcdc_msg(dhd)) < 0) {
                        if (!dhd->hang_was_sent)
                            DHD_ERROR(("dhdcdc_query_ioctl: dhdcdc_msg failed w/status %d\n", ret));
                        goto done;
                    }

                retry:
                    /* wait for interrupt and get first fragment */
                    if ((ret = dhdcdc_cmplt(dhd, prot->reqid, len)) < 0)
                        goto done;

                    flags = ltoh32(msg->flags);
                    id = (flags & CDCF_IOC_ID_MASK) >> CDCF_IOC_ID_SHIFT;

                    /* Copy info buffer */
                    if (buf)
                    {
                        if (ret < (int)len)
                            len = ret;
                        memcpy(buf, (void*) prot->buf, len);
                    }

                    /* Check the ERROR flag */
                    if (flags & CDCF_IOC_ERROR)
                    {
                        ret = ltoh32(msg->status);
                        /* Cache error from dongle */
                        dhd->dongle_error = ret;
                    }
                }
            }
            ->  {
                    static int dhdcdc_msg(dhd_pub_t *dhd)
                    {
                        DHD_TRACE(("%s: Enter\n", __FUNCTION__));

                        err = dhd_bus_txctl(dhd->bus, (uchar*)&prot->msg, len);
                    }

                    static int dhdcdc_cmplt(dhd_pub_t *dhd, uint32 id, uint32 len)
                    {
                        dhd_prot_t *prot = dhd->prot;

                        DHD_TRACE(("%s: Enter\n", __FUNCTION__));

                        do {
                            ret = dhd_bus_rxctl(dhd->bus, (uchar*)&prot->msg, cdc_len);
                            if (ret < 0)
                                break;
                        } while (CDC_IOC_ID(ltoh32(prot->msg.flags)) != id);
                    }
                }
    }
----------------------------------------------------------------------------------------------------
dhd_sdio.c
->  {
        int dhd_bus_txctl(struct dhd_bus *bus, uchar *msg, uint msglen)
        {
            uint8 sdpcm_hdrlen = bus->txglom_enable ? SDPCM_HDRLEN_TXGLOM : SDPCM_HDRLEN;

            DHD_TRACE(("%s: Enter\n", __FUNCTION__));
        
            if (bus->dhd->dongle_reset)
                return -EIO;

            if (!TXCTLOK(bus))
            {
                DHD_INFO(("%s: No bus credit bus->tx_max %d, bus->tx_seq %d\n",
                            __FUNCTION__, bus->tx_max, bus->tx_seq));
                bus->ctrl_frame_stat = TRUE;
                /* Send from dpc */
                bus->ctrl_frame_buf = frame;
                bus->ctrl_frame_len = len;

                if (!bus->dpc_sched) {
                    bus->dpc_sched = TRUE;
                    dhd_sched_dpc(bus->dhd);
                }
                if (bus->ctrl_frame_stat) {
                    dhd_wait_for_event(bus->dhd, &bus->ctrl_frame_stat);
                }
            }

            bus->dhd->txcnt_timeout = 0;
            bus->ctrl_frame_stat = TRUE;

        done:
            if ((bus->idletime == DHD_IDLE_IMMEDIATE) && !bus->dpc_sched &&
                    NO_OTHER_ACTIVE_BUS_USER(bus)) {
                bus->activity = FALSE;
                dhdsdio_bussleep(bus, TRUE);
                dhdsdio_clkctl(bus, CLK_NONE, FALSE);
            }

            dhd_os_sdunlock(bus->dhd);

            if (ret)
                bus->dhd->tx_ctlerrs++;
            else
                bus->dhd->tx_ctlpkts++;

            if (bus->dhd->txcnt_timeout >= MAX_CNTL_TX_TIMEOUT) {
                return -ETIMEDOUT;
            }

            if (ret == BCME_NODEVICE)
                err_nodevice++;
            else
                err_nodevice = 0;

            return ret ? err_nodevice >= ERROR_BCME_NODEVICE_MAX ? -ETIMEDOUT : -EIO : 0;
        }

        int dhd_bus_rxctl(struct dhd_bus *bus, uchar *msg, uint msglen)
        {
            DHD_TRACE(("%s: Enter\n", __FUNCTION__));

            if (bus->dhd->dongle_reset)
                return -EIO;

            timeleft = dhd_os_ioctl_resp_wait(bus->dhd, &bus->rxlen, false);

            dhd_os_sdlock(bus->dhd);
            rxlen = bus->rxlen;
            bcopy(bus->rxctl, msg, MIN(msglen, rxlen));
            bus->rxlen = 0;
            dhd_os_sdunlock(bus->dhd);

            if (bus->dhd->conf->ctrl_resched > 0 && !rxlen && timeleft == 0) {
                cnt++;
                if (cnt <= bus->dhd->conf->ctrl_resched) {
                    uint32 status, retry = 0;
                    R_SDREG(status, &bus->regs->intstatus, retry);
                    if ((status & I_HMB_HOST_INT) || PKT_AVAILABLE(bus, status)) {
                        DHD_ERROR(("%s: reschedule dhd_dpc, cnt=%d, status=0x%x\n",
                                    __FUNCTION__, cnt, status));
                        bus->ipend = TRUE;
                        bus->dpc_sched = TRUE;
                        dhd_sched_dpc(bus->dhd);

                        /* Wait until control frame is available */
                        timeleft = dhd_os_ioctl_resp_wait(bus->dhd, &bus->rxlen, true);

                        dhd_os_sdlock(bus->dhd);
                        rxlen = bus->rxlen;
                        bcopy(bus->rxctl, msg, MIN(msglen, rxlen));
                        bus->rxlen = 0;
                        dhd_os_sdunlock(bus->dhd);
                    }
                }
            } else {
                cnt = 0;
            }

            if (rxlen) {
                DHD_CTL(("%s: resumed on rxctl frame, got %d expected %d\n",
                            __FUNCTION__, rxlen, msglen));
            } else {
                if (timeleft == 0) {
            #ifdef DHD_DEBUG
                    uint32 status, retry = 0;
                    R_SDREG(status, &bus->regs->intstatus, retry);
                    DHD_ERROR(("%s: resumed on timeout, INT status=0x%08X\n",
                                __FUNCTION__, status));
            #else
                    DHD_ERROR(("%s: resumed on timeout\n", __FUNCTION__));
            #endif /* DHD_DEBUG */
                    if (!bus->dhd->dongle_trap_occured) {
            #ifdef DHD_FW_COREDUMP
                        bus->dhd->memdump_type = DUMP_TYPE_RESUMED_ON_TIMEOUT;
            #endif /* DHD_FW_COREDUMP */
                        dhd_os_sdlock(bus->dhd);
                        dhdsdio_checkdied(bus, NULL, 0);
                        dhd_os_sdunlock(bus->dhd);
                    }
                } else {
                    DHD_CTL(("%s: resumed for unknown reason?\n", __FUNCTION__));
                    if (!bus->dhd->dongle_trap_occured) {
            #ifdef DHD_FW_COREDUMP
                        bus->dhd->memdump_type = DUMP_TYPE_RESUMED_UNKNOWN;
            #endif /* DHD_FW_COREDUMP */
                        dhd_os_sdlock(bus->dhd);
                        dhdsdio_checkdied(bus, NULL, 0);
                        dhd_os_sdunlock(bus->dhd);
                    }
                }
            #ifdef DHD_FW_COREDUMP
                /* Dump the ram image */
                if (bus->dhd->memdump_enabled && !bus->dhd->dongle_trap_occured)
                    dhdsdio_mem_dump(bus);
            #endif /* DHD_FW_COREDUMP */
            
                if (timeleft == 0) {
                    if (rxlen == 0)
                        bus->dhd->rxcnt_timeout++;
                    DHD_ERROR(("%s: rxcnt_timeout=%d, rxlen=%d\n", __FUNCTION__,
                                bus->dhd->rxcnt_timeout, rxlen));
            #ifdef DHD_FW_COREDUMP
                    /* collect socram dump */
                    if (bus->dhd->memdump_enabled) {
                        bus->dhd->memdump_type = DUMP_TYPE_RESUMED_ON_TIMEOUT_RX;
                        dhd_bus_mem_dump(bus->dhd);
                    }
            #endif /* DHD_FW_COREDUMP */
                } else {
                    bus->dhd->rxcnt_timeout = 0;
                }

                if (rxlen)
                    bus->dhd->rx_ctlpkts++;
                else
                    bus->dhd->rx_ctlerrs++;

                if (bus->dhd->rxcnt_timeout >= MAX_CNTL_RX_TIMEOUT) {
                    return -ETIMEDOUT;
                }


                if (bus->dhd->dongle_trap_occured)
                    return -EREMOTEIO;

                return rxlen ? (int)rxlen : -EIO;
            }
        }
    }
----------------------------------------------------------------------------------------------------------
wl_android.c
->  {
        int wl_android_priv_cmd(struct net_device *net, struct ifreq *ifr, int cmd)
        {
        #define PRIVATE_COMMAND_MAX_LEN	8192
        #define PRIVATE_COMMAND_DEF_LEN	4096
            int ret = 0;
            char *command = NULL;
            int bytes_written = 0;
            android_wifi_priv_cmd priv_cmd;
            int buf_size = 0;

            if (copy_from_user(&priv_cmd, ifr->ifr_data, sizeof(android_wifi_priv_cmd))) {
                ret = -EFAULT;
                goto exit;
            }

            if ((priv_cmd.total_len > PRIVATE_COMMAND_MAX_LEN) || (priv_cmd.total_len < 0)) {
                ANDROID_ERROR(("%s: buf length invalid:%d\n", __FUNCTION__,
                            priv_cmd.total_len));
                ret = -EINVAL;
                goto exit;
            }

            buf_size = max(priv_cmd.total_len, PRIVATE_COMMAND_DEF_LEN);
            command = kmalloc((buf_size + 1), GFP_KERNEL);

            if (!command)
            {
                ANDROID_ERROR(("%s: failed to allocate memory\n", __FUNCTION__));
                ret = -ENOMEM;
                goto exit;
            }
            if (copy_from_user(command, priv_cmd.buf, priv_cmd.total_len)) {
                ret = -EFAULT;
                goto exit;
            }
            command[priv_cmd.total_len] = '\0';

            ANDROID_INFO(("%s: Android private cmd \"%s\" on %s\n", __FUNCTION__, command, ifr->ifr_name));

            bytes_written = wl_handle_private_cmd(net, command, priv_cmd.total_len);        // 调用wl_handle_private_cmd函数

            if (bytes_written >= 0) {
                if ((bytes_written == 0) && (priv_cmd.total_len > 0)) {
                    command[0] = '\0';
                }
                if (bytes_written >= priv_cmd.total_len) {
                    ANDROID_ERROR(("%s: err. bytes_written:%d >= buf_size:%d \n",
                                __FUNCTION__, bytes_written, buf_size));
                    ret = BCME_BUFTOOSHORT;
                    goto exit;
                }
                bytes_written++;
                priv_cmd.used_len = bytes_written;
                if (copy_to_user(priv_cmd.buf, command, bytes_written)) {
                    ANDROID_ERROR(("%s: failed to copy data to user buffer\n", __FUNCTION__));
                    ret = -EFAULT;
                }
            }
            else {
                /* Propagate the error */
                ret = bytes_written;
            }
        }
        ->  {
                int wl_handle_private_cmd(struct net_device *net, char *command, u32 cmd_len)
                {
                    if (strnicmp(command, CMD_RSSI, strlen(CMD_RSSI)) == 0) {
                        bytes_written = wl_android_get_rssi(net, command, priv_cmd.total_len);
                    }
                    else if (strnicmp(command, CMD_LINKSPEED, strlen(CMD_LINKSPEED)) == 0) {
                        bytes_written = wl_android_get_link_speed(net, command, priv_cmd.total_len);
                    }
                    else if (strnicmp(command, CMD_SETSUSPENDMODE, strlen(CMD_SETSUSPENDMODE)) == 0) {  // 比如dhd_priv setsuspendmode 1
                        bytes_written = wl_android_set_suspendmode(net, command, priv_cmd.total_len);
                    }
                    else if (wl_android_ext_priv_cmd(net, command, priv_cmd.total_len, &bytes_written) == 0) { // 其他命令处理
                    }
                }
            }
    }
-------------------------------------------------------------------------------------------------------------------------
wl_android_ext.c
->  {
        int wl_android_ext_priv_cmd(struct net_device *net, char *command, int total_len,
                int *bytes_written)
        {
            if (strnicmp(command, CMD_WL, strlen(CMD_WL)) == 0) {                               // 比如dhd_priv wl recal 1
                *bytes_written = wl_ext_iovar(net, command, total_len);
            }
        }
        ->  {
            /*
               dhd_priv dhd [string] ==> Not ready
                1. Get dhd val:
                Ex: dhd_priv dhd bussleep
                2. Set dhd val:
                Ex: dhd_priv dhd bussleep 1

                dhd_priv wl [WLC_GET_PM]  ==> Ready to get int val
                dhd_priv wl [WLC_SET_PM] [int]  ==> Ready to set int val
                dhd_priv wl [string]  ==> Ready to get int val
                dhd_priv wl [string] [int]  ==> Ready to set int val
                Ex: get/set WLC_PM
                dhd_priv wl 85
                dhd_priv wl 86 1
                Ex: get/set mpc
                dhd_priv wl mpc
                dhd_priv wl mpc 1
             */
                int wl_ext_iovar(struct net_device *dev, char *command, int total_len)
                {
                    if (!strcmp(wl, "wl")) {
                        if (cmd>=0 && cmd!=WLC_GET_VAR && cmd!=WLC_SET_VAR) {
                            ret = sscanf(arg, "%d", &val);
                            if (ret > 0) { // set
                                ret = wl_ext_ioctl(dev, cmd, &val, sizeof(val), TRUE);
                            } else { // get
                                ret = wl_ext_ioctl(dev, cmd, &val, sizeof(val), FALSE);
                                if (!ret) {
                                    bytes_written = snprintf(command, total_len, "%d", val);
                                    ANDROID_TRACE(("%s: command result is %s\n", __FUNCTION__, command));
                                    ret = bytes_written;
                                }
                            }
                        } else if (strlen(cmd_str)) {
                            ret = sscanf(val_str, "%d", &val);
                            if (ret > 0) { // set
                                ret = wl_ext_iovar_setint(dev, cmd_str, val);
                            } else { // get
                                ret = wl_ext_iovar_getint(dev, cmd_str, &val);
                                if (!ret) {
                                    bytes_written = snprintf(command, total_len, "%d", val);
                                    ANDROID_TRACE(("%s: command result is %s\n", __FUNCTION__, command));
                                    ret = bytes_written;
                                }
                            }
                        }
                    }
                }
                ->  {
                        int wl_ext_ioctl(struct net_device *dev, u32 cmd, void *arg, u32 len, u32 set)
                        {
                            int ret;

                            ret = wldev_ioctl(dev, cmd, arg, len, set);
                            if (ret)
                                ANDROID_ERROR(("%s: cmd=%d ret=%d\n", __FUNCTION__, cmd, ret));
                            return ret;
                        }

                        int wl_ext_iovar_getint(struct net_device *dev, s8 *iovar, s32 *val)
                        {
                            int ret;

                            ret = wldev_iovar_getint(dev, iovar, val);              // 最后也是调用wldev_ioctl
                            if (ret)
                                ANDROID_ERROR(("%s: iovar=%s, ret=%d\n", __FUNCTION__, iovar, ret));

                            return ret;
                        }

                        int wl_ext_iovar_setint(struct net_device *dev, s8 *iovar, s32 val)
                        {
                            int ret;

                            ret = wldev_iovar_setint(dev, iovar, val);              // 最后也是调用wldev_ioctl
                            if (ret)
                                ANDROID_ERROR(("%s: iovar=%s, ret=%d\n", __FUNCTION__, iovar, ret));

                            return ret;
                        }
                    }
            }
    }
---------------------------------------------------------------------------------------------------------------------
wldev_common.c
->  {
        s32 wldev_ioctl( struct net_device *dev, u32 cmd, void *arg, u32 len, u32 set)
        {
            s32 ret = 0;
            struct wl_ioctl ioc;


            memset(&ioc, 0, sizeof(ioc));
            ioc.cmd = cmd;
            ioc.buf = arg;
            ioc.len = len;
            ioc.set = set;

            ret = dhd_ioctl_entry_local(dev, &ioc, cmd);

            return ret;
        }
    }
---------------------------------------------------------------------------------------------------------
dhd_linux.c
->  {
        int dhd_ioctl_entry_local(struct net_device *net, wl_ioctl_t *ioc, int cmd)
        {
            ifidx = dhd_net2idx(dhd, net);

            ret = dhd_wl_ioctl(&dhd->pub, ifidx, ioc, ioc->buf, ioc->len);
            dhd_check_hang(net, &dhd->pub, ret);
        }
    }
