dhd_cfg80211.c
->  {
        s32 dhd_cfg80211_set_p2p_info(struct bcm_cfg80211 *cfg, int val)
        {
            dhd_pub_t *dhd =  (dhd_pub_t *)(cfg->pub);
            dhd->op_mode |= val;
            WL_ERR(("Set : op_mode=0x%04x\n", dhd->op_mode));
        #ifdef ARP_OFFLOAD_SUPPORT
            if (dhd->arp_version == 1) {
                /* IF P2P is enabled, disable arpoe */
                dhd_arp_offload_set(dhd, 0);
                dhd_arp_offload_enable(dhd, false);
            }
        #endif /* ARP_OFFLOAD_SUPPORT */

            return 0;
        }

        s32 dhd_cfg80211_clean_p2p_info(struct bcm_cfg80211 *cfg)
        {
            dhd_pub_t *dhd =  (dhd_pub_t *)(cfg->pub);
            dhd->op_mode &= ~(DHD_FLAG_P2P_GC_MODE | DHD_FLAG_P2P_GO_MODE);
            WL_ERR(("Clean : op_mode=0x%04x\n", dhd->op_mode));

        #ifdef ARP_OFFLOAD_SUPPORT
            if (dhd->arp_version == 1) {
                /* IF P2P is disabled, enable arpoe back for STA mode. */
                dhd_arp_offload_set(dhd, dhd_arp_mode);
                dhd_arp_offload_enable(dhd, true);
            }
        #endif /* ARP_OFFLOAD_SUPPORT */

            return 0;
        }
    }
-----------------------------------------------------------------------------------------
wl_android_ext.c
->  {
        static void wl_ext_iapsta_preinit(struct net_device *dev, struct wl_apsta_params *apsta_params)
        {
            if (apstamode == IAPONLY_MODE) {
                wl_ext_ioctl(dev, WLC_DOWN, NULL, 0, 1);
            #ifdef ARP_OFFLOAD_SUPPORT
                /* IF SoftAP is enabled, disable arpoe */
                dhd_arp_offload_set(dhd, 0);
                dhd_arp_offload_enable(dhd, FALSE);
            #endif /* ARP_OFFLOAD_SUPPORT */
            }
            else if (apstamode == IDUALAP_MODE) {
                wl_ext_ioctl(dev, WLC_DOWN, NULL, 0, 1);
                /* IF SoftAP is enabled, disable arpoe or wlan1 will ping fail */
            #ifdef ARP_OFFLOAD_SUPPORT
                /* IF SoftAP is enabled, disable arpoe */
                dhd_arp_offload_set(dhd, 0);
                dhd_arp_offload_enable(dhd, FALSE);
            #endif /* ARP_OFFLOAD_SUPPORT */
            }
        }

        static int wl_ext_iapsta_disable(struct net_device *dev, char *command, int total_len)
        {
            if ((apstamode==IAPSTA_MODE || apstamode==IGOSTA_MODE) &&
                    cur_if->ifmode == IAP_MODE) {
            #ifdef ARP_OFFLOAD_SUPPORT
                /* IF SoftAP is disabled, enable arpoe back for STA mode. */
                dhd_arp_offload_set(dhd, dhd_arp_mode);
                dhd_arp_offload_enable(dhd, TRUE);
            #endif /* ARP_OFFLOAD_SUPPORT */
            }
        }

        static int wl_ext_enable_iface(struct net_device *dev, char *ifname)
        {
            if (apstamode == IAPSTA_MODE || apstamode == IGOSTA_MODE) {
                if (cur_if->ifmode == ISTA_MODE) {
                    wl_ext_connect(cur_if);
                } else {
                    if (FW_SUPPORTED(dhd, rsdb)) {
                        wl_ext_ioctl(cur_if->dev, WLC_SET_SSID, &ssid, sizeof(ssid), 1);
                    } else {
                        bss_setbuf.cfg = htod32(cur_if->bssidx);
                        bss_setbuf.val = htod32(1);
                        wl_ext_iovar_setbuf(cur_if->dev, "bss", &bss_setbuf,
                                sizeof(bss_setbuf), iovar_buf, WLC_IOCTL_SMLEN, NULL);
                    }
            #ifdef ARP_OFFLOAD_SUPPORT
                    /* IF SoftAP is enabled, disable arpoe */
                    dhd_arp_offload_set(dhd, 0);
                    dhd_arp_offload_enable(dhd, FALSE);
            #endif /* ARP_OFFLOAD_SUPPORT */
                }
            }
        }
    }
--------------------------------------------------------------------------------------------------------------
dhd_linux.c
->  {
        #ifdef ARP_OFFLOAD_SUPPORT
        void aoe_update_host_ipv4_table(dhd_pub_t *dhd_pub, u32 ipa, bool add, int idx);
        static int dhd_inetaddr_notifier_call(struct notifier_block *this,
                unsigned long event, void *ptr);
        static struct notifier_block dhd_inetaddr_notifier = {
            .notifier_call = dhd_inetaddr_notifier_call
        };
        /* to make sure we won't register the same notifier twice, otherwise a loop is likely to be
         * created in kernel notifier link list (with 'next' pointing to itself)
         */
        static bool dhd_inetaddr_notifier_registered = FALSE;
        #endif /* ARP_OFFLOAD_SUPPORT */
        
        typedef struct dhd_info {
        #ifdef ARP_OFFLOAD_SUPPORT
            u32 pend_ipaddr;
        #endif /* ARP_OFFLOAD_SUPPORT */
        }

        #ifdef ARP_OFFLOAD_SUPPORT
        /* ARP offload enable */
        uint dhd_arp_enable = TRUE;
        module_param(dhd_arp_enable, uint, 0);

        /* ARP offload agent mode : Enable ARP Host Auto-Reply and ARP Peer Auto-Reply */

        #ifdef ENABLE_ARP_SNOOP_MODE
        uint dhd_arp_mode = ARP_OL_AGENT | ARP_OL_PEER_AUTO_REPLY | ARP_OL_SNOOP | ARP_OL_HOST_AUTO_REPLY;
        #else
        uint dhd_arp_mode = ARP_OL_AGENT | ARP_OL_PEER_AUTO_REPLY;
        #endif /* ENABLE_ARP_SNOOP_MODE */

        module_param(dhd_arp_mode, uint, 0);
        #endif /* ARP_OFFLOAD_SUPPORT */

        // terence 20160615: fix building error if ARP_OFFLOAD_SUPPORT removed
        #if defined(PKT_FILTER_SUPPORT)
        #if defined(ARP_OFFLOAD_SUPPORT) && !defined(GAN_LITE_NAT_KEEPALIVE_FILTER)
        static bool _turn_on_arp_filter(dhd_pub_t *dhd, int op_mode_param)
        {
            bool _apply = FALSE;
            /* In case of IBSS mode, apply arp pkt filter */
            if (op_mode_param & DHD_FLAG_IBSS_MODE) {
                _apply = TRUE;
                goto exit;
            }
            /* In case of P2P GO or GC, apply pkt filter to pass arp pkt to host */
            if (op_mode_param & (DHD_FLAG_P2P_GC_MODE | DHD_FLAG_P2P_GO_MODE)) {
                _apply = TRUE;
                goto exit;
            }

        exit:
            return _apply;
        }
        #endif /* !GAN_LITE_NAT_KEEPALIVE_FILTER */
        
        void dhd_enable_packet_filter(int value, dhd_pub_t *dhd)
        {
            /* 1 - Enable packet filter, only allow unicast packet to send up */
            /* 0 - Disable packet filter */
            if (dhd_pkt_filter_enable && (!value ||
                        (dhd_support_sta_mode(dhd) && !dhd->dhcp_in_progress)))
            {
                for (i = 0; i < dhd->pktfilter_count; i++) {
                    // terence 20160615: fix building error if ARP_OFFLOAD_SUPPORT removed
            #if defined(ARP_OFFLOAD_SUPPORT) && !defined(GAN_LITE_NAT_KEEPALIVE_FILTER)
                    if (value && (i == DHD_ARP_FILTER_NUM) &&
                            !_turn_on_arp_filter(dhd, dhd->op_mode)) {
                        DHD_TRACE(("Do not turn on ARP white list pkt filter:"
                                    "val %d, cnt %d, op_mode 0x%x\n",
                                    value, i, dhd->op_mode));
                        continue;
                    }
            #endif /* !GAN_LITE_NAT_KEEPALIVE_FILTER */
                    dhd_pktfilter_offload_enable(dhd, dhd->pktfilter[i],
                            value, dhd_master_mode);
                }
            }
        }   

        static int dhd_stop(struct net_device *net)
        {
            if (ifidx == 0) {
            #ifdef ARP_OFFLOAD_SUPPORT
                if (dhd_inetaddr_notifier_registered) {
                    dhd_inetaddr_notifier_registered = FALSE;
                    unregister_inetaddr_notifier(&dhd_inetaddr_notifier);
                }
            #endif /* ARP_OFFLOAD_SUPPORT */

            }
        }

        static int dhd_open(struct net_device *net)
        {
            if (!dhd_download_fw_on_driverload) {
            #ifdef ARP_OFFLOAD_SUPPORT
                dhd->pend_ipaddr = 0;
                if (!dhd_inetaddr_notifier_registered) {
                    dhd_inetaddr_notifier_registered = TRUE;
                    register_inetaddr_notifier(&dhd_inetaddr_notifier);
                }
            #endif /* ARP_OFFLOAD_SUPPORT */
            }
        }

        dhd_pub_t * dhd_attach(osl_t *osh, struct dhd_bus *bus, uint bus_hdrlen)
        {
        #ifdef ARP_OFFLOAD_SUPPORT
            dhd->pend_ipaddr = 0;
            if (!dhd_inetaddr_notifier_registered) {
                dhd_inetaddr_notifier_registered = TRUE;
                register_inetaddr_notifier(&dhd_inetaddr_notifier);
            }
        #endif /* ARP_OFFLOAD_SUPPORT */
        }

        int dhd_bus_start(dhd_pub_t *dhdp)
        {
        #ifdef ARP_OFFLOAD_SUPPORT
            if (dhd->pend_ipaddr) {
        #ifdef AOE_IP_ALIAS_SUPPORT
                aoe_update_host_ipv4_table(&dhd->pub, dhd->pend_ipaddr, TRUE, 0);
        #endif /* AOE_IP_ALIAS_SUPPORT */
                dhd->pend_ipaddr = 0;
            }
        #endif /* ARP_OFFLOAD_SUPPORT */
        }

        int dhd_preinit_ioctls(dhd_pub_t *dhd)
        {
        #if defined(ARP_OFFLOAD_SUPPORT)
            int arpoe = 1;
        #endif

            if ((!op_mode && dhd_get_fw_mode(dhd->info) == DHD_FLAG_HOSTAP_MODE) ||
                    (op_mode == DHD_FLAG_HOSTAP_MODE)) {
                dhd->op_mode = DHD_FLAG_HOSTAP_MODE;
            #if defined(ARP_OFFLOAD_SUPPORT)
                arpoe = 0;
            #endif
            } else if ((!op_mode && dhd_get_fw_mode(dhd->info) == DHD_FLAG_MFG_MODE) ||
                    (op_mode == DHD_FLAG_MFG_MODE)) {
            #if defined(ARP_OFFLOAD_SUPPORT)
                arpoe = 0;
            #endif /* ARP_OFFLOAD_SUPPORT */
            }
            else {
                if ((!op_mode && dhd_get_fw_mode(dhd->info) == DHD_FLAG_P2P_MODE) ||
                        (op_mode == DHD_FLAG_P2P_MODE)) {
                #if defined(ARP_OFFLOAD_SUPPORT)
                    arpoe = 0;
                #endif
                }

                #if !defined(AP) && defined(WLP2P)
                if (dhd->op_mode != DHD_FLAG_IBSS_MODE &&
                        (concurrent_mode = dhd_get_concurrent_capabilites(dhd))) {
                #if defined(ARP_OFFLOAD_SUPPORT)
                    arpoe = 1;
                #endif
                    dhd->op_mode |= concurrent_mode;
                }
                #endif
            }

            #ifdef ARP_OFFLOAD_SUPPORT
            /* Set and enable ARP offload feature for STA only  */
            #if defined(SOFTAP)
            if (arpoe && !ap_fw_loaded)
            #else
                if (arpoe)
            #endif
                {
                    dhd_arp_offload_enable(dhd, TRUE);
                    dhd_arp_offload_set(dhd, dhd_arp_mode);
                } else {
                    dhd_arp_offload_enable(dhd, FALSE);
                    dhd_arp_offload_set(dhd, 0);
                }
            dhd_arp_enable = arpoe;
            #endif /* ARP_OFFLOAD_SUPPORT */
        }

        #ifdef ARP_OFFLOAD_SUPPORT
        /* add or remove AOE host ip(s) (up to 8 IPs on the interface)  */
        void
            aoe_update_host_ipv4_table(dhd_pub_t *dhd_pub, u32 ipa, bool add, int idx)
            {
                u32 ipv4_buf[MAX_IPV4_ENTRIES]; /* temp save for AOE host_ip table */
                int i;
                int ret;

                bzero(ipv4_buf, sizeof(ipv4_buf));

                /* display what we've got */
                ret = dhd_arp_get_arp_hostip_table(dhd_pub, ipv4_buf, sizeof(ipv4_buf), idx);
                DHD_ARPOE(("%s: hostip table read from Dongle:\n", __FUNCTION__));
        #ifdef AOE_DBG
                dhd_print_buf(ipv4_buf, 32, 4); /* max 8 IPs 4b each */
        #endif
                /* now we saved hoste_ip table, clr it in the dongle AOE */
                dhd_aoe_hostip_clr(dhd_pub, idx);

                if (ret) {
                    DHD_ERROR(("%s failed\n", __FUNCTION__));
                    return;
                }

                for (i = 0; i < MAX_IPV4_ENTRIES; i++) {
                    if (add && (ipv4_buf[i] == 0)) {
                        ipv4_buf[i] = ipa;
                        add = FALSE; /* added ipa to local table  */
                        DHD_ARPOE(("%s: Saved new IP in temp arp_hostip[%d]\n",
                                    __FUNCTION__, i));
                    } else if (ipv4_buf[i] == ipa) {
                        ipv4_buf[i]	= 0;
                        DHD_ARPOE(("%s: removed IP:%x from temp table %d\n",
                                    __FUNCTION__, ipa, i));
                    }

                    if (ipv4_buf[i] != 0) {
                        /* add back host_ip entries from our local cache */
                        dhd_arp_offload_add_ip(dhd_pub, ipv4_buf[i], idx);
                        DHD_ARPOE(("%s: added IP:%x to dongle arp_hostip[%d]\n\n",
                                    __FUNCTION__, ipv4_buf[i], i));
                    }
                }
        #ifdef AOE_DBG
                /* see the resulting hostip table */
                dhd_arp_get_arp_hostip_table(dhd_pub, ipv4_buf, sizeof(ipv4_buf), idx);
                DHD_ARPOE(("%s: read back arp_hostip table:\n", __FUNCTION__));
                dhd_print_buf(ipv4_buf, 32, 4); /* max 8 IPs 4b each */
        #endif
            }

        /*
         * Notification mechanism from kernel to our driver. This function is called by the Linux kernel
         * whenever there is an event related to an IP address.
         * ptr : kernel provided pointer to IP address that has changed
         */
        static int dhd_inetaddr_notifier_call(struct notifier_block *this,
                unsigned long event,
                void *ptr)
        {
            struct in_ifaddr *ifa = (struct in_ifaddr *)ptr;

            dhd_info_t *dhd;
            dhd_pub_t *dhd_pub;
            int idx;

            if (!dhd_arp_enable)
                return NOTIFY_DONE;
            if (!ifa || !(ifa->ifa_dev->dev))
                return NOTIFY_DONE;

        #if (LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 31))
            /* Filter notifications meant for non Broadcom devices */
            if ((ifa->ifa_dev->dev->netdev_ops != &dhd_ops_pri) &&
                    (ifa->ifa_dev->dev->netdev_ops != &dhd_ops_virt)) {
        #if defined(WL_ENABLE_P2P_IF)
                if (!wl_cfgp2p_is_ifops(ifa->ifa_dev->dev->netdev_ops))
        #endif /* WL_ENABLE_P2P_IF */
                    return NOTIFY_DONE;
            }
        #endif /* LINUX_VERSION_CODE */

            dhd = DHD_DEV_INFO(ifa->ifa_dev->dev);
            if (!dhd)
                return NOTIFY_DONE;

            dhd_pub = &dhd->pub;

            if (dhd_pub->arp_version == 1) {
                idx = 0;
            } else {
                for (idx = 0; idx < DHD_MAX_IFS; idx++) {
                    if (dhd->iflist[idx] && dhd->iflist[idx]->net == ifa->ifa_dev->dev)
                        break;
                }
                if (idx < DHD_MAX_IFS)
                    DHD_TRACE(("ifidx : %p %s %d\n", dhd->iflist[idx]->net,
                                dhd->iflist[idx]->name, dhd->iflist[idx]->idx));
                else {
                    DHD_ERROR(("Cannot find ifidx for(%s) set to 0\n", ifa->ifa_label));
                    idx = 0;
                }
            }

            switch (event) {
                case NETDEV_UP:
                    DHD_ARPOE(("%s: [%s] Up IP: 0x%x\n",
                                __FUNCTION__, ifa->ifa_label, ifa->ifa_address));

                    if (dhd->pub.busstate != DHD_BUS_DATA) {
                        DHD_ERROR(("%s: bus not ready, exit\n", __FUNCTION__));
                        if (dhd->pend_ipaddr) {
                            DHD_ERROR(("%s: overwrite pending ipaddr: 0x%x\n",
                                        __FUNCTION__, dhd->pend_ipaddr));
                        }
                        dhd->pend_ipaddr = ifa->ifa_address;
                        break;
                    }

                #ifdef AOE_IP_ALIAS_SUPPORT
                    DHD_ARPOE(("%s:add aliased IP to AOE hostip cache\n",
                                __FUNCTION__));
                    aoe_update_host_ipv4_table(dhd_pub, ifa->ifa_address, TRUE, idx);
                #endif /* AOE_IP_ALIAS_SUPPORT */
                    break;

                case NETDEV_DOWN:
                    DHD_ARPOE(("%s: [%s] Down IP: 0x%x\n",
                                __FUNCTION__, ifa->ifa_label, ifa->ifa_address));
                    dhd->pend_ipaddr = 0;
                #ifdef AOE_IP_ALIAS_SUPPORT
                    DHD_ARPOE(("%s:interface is down, AOE clr all for this if\n",
                                __FUNCTION__));
                    if ((dhd_pub->op_mode & DHD_FLAG_HOSTAP_MODE) ||
                            (ifa->ifa_dev->dev != dhd_linux_get_primary_netdev(dhd_pub))) {
                        aoe_update_host_ipv4_table(dhd_pub, ifa->ifa_address, FALSE, idx);
                    } else
                #endif /* AOE_IP_ALIAS_SUPPORT */
                    {
                        dhd_aoe_hostip_clr(&dhd->pub, idx);
                        dhd_aoe_arp_clr(&dhd->pub, idx);
                    }
                    break;

                default:
                    DHD_ARPOE(("%s: do noting for [%s] Event: %lu\n",
                                __func__, ifa->ifa_label, event));
                    break;
            }
            return NOTIFY_DONE;
        }
        #endif /* ARP_OFFLOAD_SUPPORT */
        
        void dhd_detach(dhd_pub_t *dhdp)
        {
        #ifdef ARP_OFFLOAD_SUPPORT
            if (dhd_inetaddr_notifier_registered) {
                dhd_inetaddr_notifier_registered = FALSE;
                unregister_inetaddr_notifier(&dhd_inetaddr_notifier);
            }
        #endif /* ARP_OFFLOAD_SUPPORT */
        }    
    }
----------------------------------------------------------------------------------------------------------
wl_cfg80211.c
->  {
        static s32 wl_cfg80211_start_ap(
                struct wiphy *wiphy,
                struct net_device *dev,
                struct cfg80211_ap_settings *info)
        {
            if (dev->ieee80211_ptr->iftype == NL80211_IFTYPE_AP) {
                dev_role = NL80211_IFTYPE_AP;
                dhd->op_mode |= DHD_FLAG_HOSTAP_MODE;
                err = dhd_ndo_enable(dhd, FALSE);

            #ifdef PKT_FILTER_SUPPORT
                /* Disable packet filter */
                if (dhd->early_suspended) {
                    WL_ERR(("Disable pkt_filter\n"));
                    dhd_enable_packet_filter(0, dhd);
                }
            #endif /* PKT_FILTER_SUPPORT */
            #ifdef ARP_OFFLOAD_SUPPORT
                /* IF SoftAP is enabled, disable arpoe */
                if (dhd->op_mode & DHD_FLAG_STA_MODE) {
                    dhd_arp_offload_set(dhd, 0);
                    dhd_arp_offload_enable(dhd, FALSE);
                }
            #endif /* ARP_OFFLOAD_SUPPORT */
            }
        }

        static s32 wl_cfg80211_stop_ap(
                struct wiphy *wiphy,
                struct net_device *dev)
        {
            if (dev_role == NL80211_IFTYPE_AP) {
            #ifdef PKT_FILTER_SUPPORT
                /* Enable packet filter */
                if (dhd->early_suspended) {
                    WL_ERR(("Enable pkt_filter\n"));
                    dhd_enable_packet_filter(1, dhd);
                }
            #endif /* PKT_FILTER_SUPPORT */
            #ifdef ARP_OFFLOAD_SUPPORT
                /* IF SoftAP is disabled, enable arpoe back for STA mode. */
                if (dhd->op_mode & DHD_FLAG_STA_MODE) {
                    dhd_arp_offload_set(dhd, dhd_arp_mode);
                    dhd_arp_offload_enable(dhd, TRUE);
                }
            #endif /* ARP_OFFLOAD_SUPPORT */
            }
        }
    }
---------------------------------------------------------------------------------------
dhd_common.c
->  {
        /* ========================== */
        /* ==== ARP OFFLOAD SUPPORT = */
        /* ========================== */
    #ifdef ARP_OFFLOAD_SUPPORT
        void dhd_arp_offload_set(dhd_pub_t * dhd, int arp_mode)
        {
            int retcode;

            retcode = dhd_wl_ioctl_set_intiovar(dhd, "arp_ol",
                    arp_mode, WLC_SET_VAR, TRUE, 0);

            retcode = retcode >= 0 ? 0 : retcode;
            if (retcode)
                DHD_ERROR(("%s: failed to set ARP offload mode to 0x%x, retcode = %d\n",
                            __FUNCTION__, arp_mode, retcode));
            else
                DHD_ARPOE(("%s: successfully set ARP offload mode to 0x%x\n",
                            __FUNCTION__, arp_mode));
        }

        void dhd_arp_offload_enable(dhd_pub_t * dhd, int arp_enable)
        {
            int retcode;

            retcode = dhd_wl_ioctl_set_intiovar(dhd, "arpoe",
                    arp_enable, WLC_SET_VAR, TRUE, 0);

            retcode = retcode >= 0 ? 0 : retcode;
            if (retcode)
                DHD_ERROR(("%s: failed to enabe ARP offload to %d, retcode = %d\n",
                            __FUNCTION__, arp_enable, retcode));
            else
                DHD_ARPOE(("%s: successfully enabed ARP offload to %d\n",
                            __FUNCTION__, arp_enable));
            if (arp_enable) {
                uint32 version;
                retcode = dhd_wl_ioctl_get_intiovar(dhd, "arp_version",
                        &version, WLC_GET_VAR, FALSE, 0);
                if (retcode) {
                    DHD_INFO(("%s: fail to get version (maybe version 1:retcode = %d\n",
                                __FUNCTION__, retcode));
                    dhd->arp_version = 1;
                }
                else {
                    DHD_INFO(("%s: ARP Version= %x\n", __FUNCTION__, version));
                    dhd->arp_version = version;
                }
            }
        }

        void dhd_aoe_arp_clr(dhd_pub_t *dhd, int idx)
        {
            int ret = 0;

            if (dhd == NULL) return;
            if (dhd->arp_version == 1)
                idx = 0;

            ret = dhd_iovar(dhd, idx, "arp_table_clear", NULL, 0, NULL, 0, TRUE);
            if (ret < 0)
                DHD_ERROR(("%s failed code %d\n", __FUNCTION__, ret));
        }

        void dhd_aoe_hostip_clr(dhd_pub_t *dhd, int idx)
        {
            int ret = 0;

            if (dhd == NULL) return;
            if (dhd->arp_version == 1)
                idx = 0;

            ret = dhd_iovar(dhd, idx, "arp_hostip_clear", NULL, 0, NULL, 0, TRUE);
            if (ret < 0)
                DHD_ERROR(("%s failed code %d\n", __FUNCTION__, ret));
        }

        void dhd_arp_offload_add_ip(dhd_pub_t *dhd, uint32 ipaddr, int idx)
        {
            int ret;

            if (dhd == NULL) return;
            if (dhd->arp_version == 1)
                idx = 0;

            ret = dhd_iovar(dhd, idx, "arp_hostip", (char *)&ipaddr, sizeof(ipaddr),
                    NULL, 0, TRUE);
            if (ret)
                DHD_ERROR(("%s: ARP ip addr add failed, ret = %d\n", __FUNCTION__, ret));
            else
                DHD_ARPOE(("%s: sARP H ipaddr entry added \n",
                            __FUNCTION__));
        }

        int dhd_arp_get_arp_hostip_table(dhd_pub_t *dhd, void *buf, int buflen, int idx)
        {
            int ret, i;
            uint32 *ptr32 = buf;
            bool clr_bottom = FALSE;

            if (!buf)
                return -1;
            if (dhd == NULL) return -1;
            if (dhd->arp_version == 1)
                idx = 0;

            ret = dhd_iovar(dhd, idx, "arp_hostip", NULL, 0, (char *)buf, buflen,
                    FALSE);
            if (ret) {
                DHD_ERROR(("%s: ioctl WLC_GET_VAR error %d\n",
                            __FUNCTION__, ret));

                return -1;
            }

            /* clean up the buf, ascii reminder */
            for (i = 0; i < MAX_IPV4_ENTRIES; i++) {
                if (!clr_bottom) {
                    if (*ptr32 == 0)
                        clr_bottom = TRUE;
                } else {
                    *ptr32 = 0;
                }
                ptr32++;
            }

            return 0;
        }
    #endif /* ARP_OFFLOAD_SUPPORT  */
    }
----------------------------------------------------------------------------------------------
dhd.h
->  {
        typedef struct dhd_pub {
        #if defined(ARP_OFFLOAD_SUPPORT)
            uint32 arp_version;
        #endif
        }

        #ifdef ARP_OFFLOAD_SUPPORT
        #define MAX_IPV4_ENTRIES	8
        void dhd_arp_offload_set(dhd_pub_t * dhd, int arp_mode);
        void dhd_arp_offload_enable(dhd_pub_t * dhd, int arp_enable);

        /* dhd_commn arp offload wrapers */
        void dhd_aoe_hostip_clr(dhd_pub_t *dhd, int idx);
        void dhd_aoe_arp_clr(dhd_pub_t *dhd, int idx);
        int dhd_arp_get_arp_hostip_table(dhd_pub_t *dhd, void *buf, int buflen, int idx);
        void dhd_arp_offload_add_ip(dhd_pub_t *dhd, uint32 ipaddr, int idx);
        #endif /* ARP_OFFLOAD_SUPPORT */
    }
