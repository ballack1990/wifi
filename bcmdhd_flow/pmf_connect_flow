wl_cfg80211.c
->  {
        static struct cfg80211_ops wl_cfg80211_ops = {
            .connect = wl_cfg80211_connect,
        }

        static s32 wl_cfg80211_connect(struct wiphy *wiphy, struct net_device *dev, struct cfg80211_connect_params *sme) {
            struct ieee80211_channel *chan = sme->channel;

            WL_DBG(("In\n"));                                       // # wl_cfg80211_connect :In
            WL_DBG(("SME IE : len=%zu\n", sme->ie_len));            // # wl_cfg80211_connect :SME IE : len=28
            if (sme->ie != NULL && sme->ie_len > 0 && (wl_dbg_level & WL_DBG_DBG)) {  // # 0000: 30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 00
                prhex(NULL, (uchar *)sme->ie, sme->ie_len);                           // # 0010: 00 0f ac 02 80 00 7f 04 00 00 0a 02
            }

            wl_cfg80211_check_in4way(cfg, dev, WAIT_DISCONNECTED,       // # wl_cfg80211_check_in4way :status=3, action=0x8, in4way=0x9
                    WL_EXT_STATUS_CONNECTING, NULL);

            /* find the RSN_IE */
            if ((wpa2_ie = bcm_parse_tlvs((u8 *)sme->ie, sme->ie_len,
                            DOT11_MNG_RSN_ID)) != NULL) {
                WL_DBG((" WPA2 IE is found\n"));                        // # wl_cfg80211_connect : WPA2 IE is found
            }
            /* find the WPA_IE */
            if ((wpa_ie = wl_cfgp2p_find_wpaie((u8 *)sme->ie,
                            sme->ie_len)) != NULL) {
                WL_DBG((" WPA IE is found\n"));                         // # wl_cfg80211_connect : WPA IE is found
            }

            // # wl_cfg80211_set_mgmt_vndr_ies :Enter. pktflag:0x20 bssidx:0 vnd_ie_len:28
            err = wl_cfg80211_set_mgmt_vndr_ies(cfg, ndev_to_cfgdev(dev), bssidx,
                    VNDR_IE_ASSOCREQ_FLAG, (const u8 *)sme->ie, sme->ie_len);

            // # wl_cfg80211_connect :channel (1), center_req (2412), 1 channels
            if (chan) {
                cfg->channel = ieee80211_frequency_to_channel(chan->center_freq);
                chan_cnt = 1;
                WL_DBG(("channel (%d), center_req (%d), %d channels\n", cfg->channel,
                            chan->center_freq, chan_cnt));
            }

            WL_DBG(("3. set wpa version \n"));                          // # wl_cfg80211_connect :3. set wpa version

            err = wl_set_wpa_version(dev, sme);                         // # wl_set_wpa_version :setting wpa_auth to 0xc0

            err = wl_set_auth_type(dev, sme);                           // # wl_set_auth_type :open system

            err = wl_set_set_cipher(dev, sme);                          // # wl_set_set_cipher :pval (4) gval (4)
                                                                        // # wl_set_set_cipher : NO, is_wps_conn, Set pval | gval to WSEC
                                                                        // # wl_set_set_cipher : Set WSEC to fW 0x4
            err = wl_set_key_mgmt(dev, sme);

            err = wl_set_set_sharedkey(dev, sme);                       // # wl_set_set_sharedkey :key len (0)

            wl_ext_get_sec(dev, 0, sec, sizeof(sec));

            /*
             *  Join with specific BSSID and cached SSID
             *  If SSID is zero join based on BSSID only
             */
            join_params_size = WL_EXTJOIN_PARAMS_FIXED_SIZE +
                chan_cnt * sizeof(chanspec_t);
            ext_join_params =  (wl_extjoin_params_t*)kzalloc(join_params_size, GFP_KERNEL);
            if (ext_join_params == NULL) {
                err = -ENOMEM;
                wl_clr_drv_status(cfg, CONNECTING, dev);
                goto exit;
            }
            ext_join_params->ssid.SSID_len = min(sizeof(ext_join_params->ssid.SSID), sme->ssid_len);
            memcpy(&ext_join_params->ssid.SSID, sme->ssid, ext_join_params->ssid.SSID_len);
            wl_update_prof(cfg, dev, NULL, &ext_join_params->ssid, WL_PROF_SSID);
            ext_join_params->ssid.SSID_len = htod32(ext_join_params->ssid.SSID_len);
            /* increate dwell time to receive probe response or detect Beacon
             * from target AP at a noisy air only during connect command
             */
            ext_join_params->scan.active_time = chan_cnt ? WL_SCAN_JOIN_ACTIVE_DWELL_TIME_MS : -1;
            ext_join_params->scan.passive_time = chan_cnt ? WL_SCAN_JOIN_PASSIVE_DWELL_TIME_MS : -1;
            /* Set up join scan parameters */
            ext_join_params->scan.scan_type = -1;
            ext_join_params->scan.nprobes = chan_cnt ?
                (ext_join_params->scan.active_time/WL_SCAN_JOIN_PROBE_INTERVAL_MS) : -1;
            ext_join_params->scan.home_time = -1;

            if (sme->bssid)
                memcpy(&ext_join_params->assoc.bssid, sme->bssid, ETH_ALEN);
            else
                memcpy(&ext_join_params->assoc.bssid, &ether_bcast, ETH_ALEN);
            ext_join_params->assoc.chanspec_num = chan_cnt;
            if (chan_cnt) {
                if (cfg->channel) {
                    /*
                     * Use the channel provided by userspace
                     */
                    u16 channel, band, bw, ctl_sb;
                    chanspec_t chspec;
                    channel = cfg->channel;
                    band = (channel <= CH_MAX_2G_CHANNEL) ? WL_CHANSPEC_BAND_2G
                        : WL_CHANSPEC_BAND_5G;

                    /* Get min_bw set for the interface */
                    bw = wl_cfg80211_ulb_get_min_bw_chspec(cfg, dev->ieee80211_ptr, bssidx);
                    if (bw == INVCHANSPEC) {
                        WL_ERR(("Invalid chanspec \n"));
                        kfree(ext_join_params);
                        err = BCME_ERROR;
                        goto exit;
                    }

                    ctl_sb = WL_CHANSPEC_CTL_SB_NONE;
                    chspec = (channel | band | bw | ctl_sb);
                    ext_join_params->assoc.chanspec_list[0]  &= WL_CHANSPEC_CHAN_MASK;
                    ext_join_params->assoc.chanspec_list[0] |= chspec;
                    ext_join_params->assoc.chanspec_list[0] =
                        wl_chspec_host_to_driver(ext_join_params->assoc.chanspec_list[0]);
                }
            }

            ext_join_params->assoc.chanspec_num = htod32(ext_join_params->assoc.chanspec_num);
            if (ext_join_params->ssid.SSID_len < IEEE80211_MAX_SSID_LEN) {
                WL_INFORM(("ssid \"%s\", len (%d)\n", ext_join_params->ssid.SSID,    // # wl_cfg80211_connect : ssid "ASUS_68U_2.4G", len (13)
                            ext_join_params->ssid.SSID_len));
            }

        #ifdef WL_EXT_IAPSTA
            wl_ext_iapsta_update_channel(dhdp, dev, cfg->channel);
        #endif

            // # wl_cfg80211_connect : Connecting with ac:9e:17:7c:af:d8 ssid "ASUS_68U_2.4G", len (13), sec=wpa2psk/mfpc/516, channel=1
            WL_MSG(dev->name, "Connecting with " MACDBG " ssid \"%s\", len (%d), "
                    "sec=%s, channel=%d\n\n",
                    MAC2STRDBG((u8*)(&ext_join_params->assoc.bssid)),
                    ext_join_params->ssid.SSID, ext_join_params->ssid.SSID_len, sec,
                    cfg->channel);

            err = wldev_iovar_setbuf_bsscfg(dev, "join", ext_join_params, join_params_size,
                    cfg->ioctl_buf, WLC_IOCTL_MAXLEN, bssidx, &cfg->ioctl_buf_sync);

        set_ssid:
            memset(&join_params, 0, sizeof(join_params));
            join_params_size = sizeof(join_params.ssid);

            join_params.ssid.SSID_len = min(sizeof(join_params.ssid.SSID), sme->ssid_len);
            memcpy(&join_params.ssid.SSID, sme->ssid, join_params.ssid.SSID_len);
            join_params.ssid.SSID_len = htod32(join_params.ssid.SSID_len);
            wl_update_prof(cfg, dev, NULL, &join_params.ssid, WL_PROF_SSID);
            if (sme->bssid)
                memcpy(&join_params.params.bssid, sme->bssid, ETH_ALEN);
            else
                memcpy(&join_params.params.bssid, &ether_bcast, ETH_ALEN);

            if (wl_ch_to_chanspec(dev, cfg->channel, &join_params, &join_params_size) < 0) {
                WL_ERR(("Invalid chanspec\n"));
                return -EINVAL;
            }

            WL_DBG(("join_param_size %zu\n", join_params_size));

            if (join_params.ssid.SSID_len < IEEE80211_MAX_SSID_LEN) {
                WL_MSG(dev->name, "ssid \"%s\", len (%d)\n", join_params.ssid.SSID,
                        join_params.ssid.SSID_len);
            }
            err = wldev_ioctl_set(dev, WLC_SET_SSID, &join_params, join_params_size);

            if (!err)
                wl_cfg80211_check_in4way(cfg, dev, NO_SCAN_IN4WAY|NO_BTC_IN4WAY,   // # wl_cfg80211_check_in4way :status=3, action=0x1, in4way=0x9
                        WL_EXT_STATUS_CONNECTING, NULL);

        #ifdef WLTDLS
            /* disable TDLS if number of connected interfaces is >= 1 */           // # wl_cfg80211_tdls_config :Enter state:2
            wl_cfg80211_tdls_config(cfg, TDLS_STATE_CONNECT, false);               // # wl_cfg80211_tdls_config :Skip tdls config. state:2 
                                                                                   // # update_reqd:0 current_status:1
        #endif /* WLTDLS */
        }

        static s32 wl_set_key_mgmt(struct net_device *dev, struct cfg80211_connect_params *sme) {
        #ifdef MFP
            if ((err = wl_cfg80211_set_mfp(cfg, dev, sme)) < 0) {
                WL_ERR(("MFP set failed err:%d\n", err));
                return -EINVAL;
            }
        #endif /* MFP */
        
            WL_DBG(("setting wpa_auth to 0x%x\n", val));                    // # wl_set_key_mgmt :setting wpa_auth to 0x80
            err = wldev_iovar_setint_bsscfg(dev, "wpa_auth", val, bssidx);

            sec = wl_read_prof(cfg, dev, WL_PROF_SEC);
            sec->wpa_auth = sme->crypto.akm_suites[0];
        }

        static s32 wl_cfg80211_set_mfp(struct bcm_cfg80211 *cfg, struct net_device *dev, struct cfg80211_connect_params *sme) {
            s32 mfp = WL_MFP_NONE;
            s32 current_mfp = WL_MFP_NONE;
            bool fw_support = false;

            /* Check fw support and retreive current mfp val */
            err = wldev_iovar_getint(dev, "mfp", &current_mfp);
            if (!err) {
                fw_support = true;
            }

            /* Parse the wpa2ie to decode the MFP capablity */
            if (((wpa2_ie = bcm_parse_tlvs((u8 *)sme->ie, sme->ie_len,
                                DOT11_MNG_RSN_ID)) != NULL) &&
                    (wl_cfg80211_get_rsn_capa(wpa2_ie, &rsn_cap) == 0)) {
                /* Check for MFP cap in the RSN capability field */
                if (rsn_cap[0] & RSN_CAP_MFPR) {
                    mfp = WL_MFP_REQUIRED;
                } else if (rsn_cap[0] & RSN_CAP_MFPC) {
                    mfp = WL_MFP_CAPABLE;
                }

                /*
                 * eptr --> end/last byte addr of wpa2_ie
                 * ptr --> to keep track of current/required byte addr
                 */
                eptr = (u8*)wpa2_ie + (wpa2_ie->len + TLV_HDR_LEN);
                /* pointing ptr to the next byte after rns_cap */
                ptr = (u8*)rsn_cap + RSN_CAP_LEN;
                if (mfp && (eptr - ptr) >= WPA2_PMKID_COUNT_LEN) {
                    /* pmkid now to point to 1st byte addr of pmkid in wpa2_ie */
                    pmkid = (wpa_pmkid_list_t*)ptr;
                    count = pmkid->count.low | (pmkid->count.high << 8);
                    /* ptr now to point to last byte addr of pmkid */
                    ptr = (u8*)pmkid + (count * WPA2_PMKID_LEN
                            + WPA2_PMKID_COUNT_LEN);
                    if ((eptr - ptr) >= WPA_SUITE_LEN) {
                        /* group_mgmt_cs now to point to first byte addr of bip */
                        group_mgmt_cs = ptr;
                    }
                }
            }

            // # wl_cfg80211_set_mfp : mfp:1 wpa2_ie ptr:dd6ca65c rsn_cap 0x800 fw mfp support:1
            WL_DBG((" mfp:%d wpa2_ie ptr:%p rsn_cap 0x%x%x fw mfp support:%d\n",
                        mfp, wpa2_ie, rsn_cap[0], rsn_cap[1], fw_support));

            if (fw_support == false) {
                if (mfp == WL_MFP_REQUIRED) {
                    /* if mfp > 0, mfp capability set in wpa ie, but
                     * FW indicated error for mfp. Propagate the error up.
                     */
                    WL_ERR(("mfp capability found in wpaie. But fw doesn't "
                                "seem to support MFP\n"));
                    return -EINVAL;
                } else {
                    /* Firmware doesn't support mfp. But since connection request
                     * is for non-mfp case, don't bother.
                     */
                    return 0;
                }
            } else if (mfp != current_mfp) {
                err = wldev_iovar_setint(dev, "mfp", mfp);
                if (unlikely(err)) {
                    WL_ERR(("mfp (%d) set failed ret:%d \n", mfp, err));
                    return err;
                }
                WL_DBG(("mfp set to 0x%x \n", mfp));                        // # wl_cfg80211_set_mfp :mfp set to 0x1
            }
        }

        static int wl_cfg80211_get_rsn_capa(bcm_tlv_t *wpa2ie, u8** rsn_cap) {

        }
    }
